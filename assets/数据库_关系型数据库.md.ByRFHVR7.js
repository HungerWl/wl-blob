import{_ as i,c as a,a3 as e,o as t}from"./chunks/framework.DhgVJjF7.js";const c=JSON.parse('{"title":"关系型数据库","description":"","frontmatter":{"title":"关系型数据库"},"headers":[],"relativePath":"数据库/关系型数据库.md","filePath":"数据库/关系型数据库.md"}'),l={name:"数据库/关系型数据库.md"};function n(h,s,p,d,k,o){return t(),a("div",null,s[0]||(s[0]=[e(`<h1 id="关系型数据库" tabindex="-1">关系型数据库 <a class="header-anchor" href="#关系型数据库" aria-label="Permalink to &quot;关系型数据库&quot;">​</a></h1><h2 id="核心概念" tabindex="-1">核心概念 <a class="header-anchor" href="#核心概念" aria-label="Permalink to &quot;核心概念&quot;">​</a></h2><ul><li>主键（Primary Key）： 唯一标识一条记录的字段或字段组合。</li><li>索引（Index）： 用于加速数据检索的数据结构，类似于书的目录。</li><li>视图（View）： 基于一个或多个表的虚拟表，用于简化查询和保护数据。</li><li>事务（Transaction）： 一组 SQL 语句，作为一个整体被数据库处理，要么全部成功，要么全部失败，保证数据的一致性。</li><li>锁（Lock）： 用于并发控制，防止多个用户同时修改同一数据。</li><li>范式（Normalization）： 数据库设计理论，用于减少数据冗余、提高数据一致性。</li></ul><h3 id="一-主键" tabindex="-1">（一）主键 <a class="header-anchor" href="#一-主键" aria-label="Permalink to &quot;（一）主键&quot;">​</a></h3><p>代表身份证，唯一，非空，不变</p><h3 id="实践" tabindex="-1">实践 <a class="header-anchor" href="#实践" aria-label="Permalink to &quot;实践&quot;">​</a></h3><ul><li>主键约束</li></ul><div class="language-sql vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sql</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">CREATE</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> TABLE</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> students</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    student_id </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">INT</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> PRIMARY KEY</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    name</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> VARCHAR</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">50</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">),</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    age </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">INT</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span></code></pre></div><h3 id="二-外键" tabindex="-1">（二）外键 <a class="header-anchor" href="#二-外键" aria-label="Permalink to &quot;（二）外键&quot;">​</a></h3><p>外键约束</p><blockquote><p><strong>场景</strong></p></blockquote><p><strong>CASCADE</strong>：当父表中的数据更新或删除时，子表中与之关联的数据也会被自动更新或删除。</p><p><strong>SET NULL</strong>：当父表中的数据被删除或更新时，子表中相关字段被置为<code>NULL</code>。</p><p><strong>NO ACTION</strong>：不允许父表数据删除或更新与子表数据关联的记录，通常与<code>RESTRICT</code>一起使用，表示对不符合外键约束的操作进行限制。</p><p><strong>RESTRICT</strong>：与<code>NO ACTION</code>类似，阻止对父表的删除或更新操作，直到没有引用此数据的子表记录。</p><blockquote><p>例子</p></blockquote><h3 id="代码解释" tabindex="-1">代码解释： <a class="header-anchor" href="#代码解释" aria-label="Permalink to &quot;代码解释：&quot;">​</a></h3><h4 id="_1-创建-customers-表-客户表" tabindex="-1">1. 创建 <code>customers</code> 表（客户表） <a class="header-anchor" href="#_1-创建-customers-表-客户表" aria-label="Permalink to &quot;1. 创建 \`customers\` 表（客户表）&quot;">​</a></h4><div class="language-sql vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sql</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">CREATE</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> TABLE</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> customers</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    id </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">INT</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> PRIMARY KEY</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    name</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> VARCHAR</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">100</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span></code></pre></div><ul><li><code>CREATE TABLE customers</code>：这是创建一个名为 <code>customers</code> 的新表。</li><li><code>id INT PRIMARY KEY</code>：表中的 <code>id</code> 列是整型（<code>INT</code>），并且设置为主键（<code>PRIMARY KEY</code>）。主键是唯一标识每一行数据的字段，也就是每个客户都有一个唯一的 <code>id</code>。</li><li><code>name VARCHAR(100)</code>：<code>name</code> 列是变长字符串类型（<code>VARCHAR</code>），最大长度为100个字符，用于存储客户的名字。</li></ul><p>所以，这段代码的作用是创建一个客户表，表中有两个列：<code>id</code>（唯一标识客户）和 <code>name</code>（客户的名字）。</p><h4 id="_2-创建-orders-表-订单表" tabindex="-1">2. 创建 <code>orders</code> 表（订单表） <a class="header-anchor" href="#_2-创建-orders-表-订单表" aria-label="Permalink to &quot;2. 创建 \`orders\` 表（订单表）&quot;">​</a></h4><div class="language-sql vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sql</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">CREATE</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> TABLE</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> orders</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    order_id </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">INT</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> PRIMARY KEY</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    order_date </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">DATE</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    customer_id </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">INT</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    FOREIGN KEY</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (customer_id) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">REFERENCES</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> customers(id)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span></code></pre></div><ul><li><code>CREATE TABLE orders</code>：这是创建一个名为 <code>orders</code> 的新表。</li><li><code>order_id INT PRIMARY KEY</code>：表中的 <code>order_id</code> 列是整型（<code>INT</code>），并且是主键（<code>PRIMARY KEY</code>）。每个订单都有一个唯一的 <code>order_id</code>。</li><li><code>order_date DATE</code>：<code>order_date</code> 列是日期类型（<code>DATE</code>），用于存储订单的日期。</li><li><code>customer_id INT</code>：<code>customer_id</code> 列是整型（<code>INT</code>），它将存储客户的 ID，用来标识哪个客户创建了这个订单。这里的 <code>customer_id</code> 是外键（<code>FOREIGN KEY</code>），它与 <code>customers</code> 表中的 <code>id</code> 列关联。</li></ul><h4 id="_3-外键约束-建立表之间的关联" tabindex="-1">3. 外键约束（建立表之间的关联） <a class="header-anchor" href="#_3-外键约束-建立表之间的关联" aria-label="Permalink to &quot;3. 外键约束（建立表之间的关联）&quot;">​</a></h4><div class="language-sql vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sql</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">FOREIGN KEY</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (customer_id) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">REFERENCES</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> customers(id)</span></span></code></pre></div><ul><li><code>FOREIGN KEY (customer_id)</code>：定义 <code>orders</code> 表中的 <code>customer_id</code> 列为外键。</li><li><code>REFERENCES customers(id)</code>：外键 <code>customer_id</code> 引用的是 <code>customers</code> 表中的 <code>id</code> 列。意思是 <code>orders</code> 表中的 <code>customer_id</code> 值必须是 <code>customers</code> 表中已存在的 <code>id</code> 值，确保每个订单都有一个有效的客户。</li></ul><h3 id="三-唯一约束" tabindex="-1">（三）唯一约束 <a class="header-anchor" href="#三-唯一约束" aria-label="Permalink to &quot;（三）唯一约束&quot;">​</a></h3><div class="language-tex vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">tex</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">主键不允许为 NULL，而唯一约束列允许 NULL</span></span></code></pre></div><h3 id="四-复合主键" tabindex="-1">（四）复合主键 <a class="header-anchor" href="#四-复合主键" aria-label="Permalink to &quot;（四）复合主键&quot;">​</a></h3><blockquote><p>定义</p></blockquote><div class="language-tex vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">tex</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">是指由多个列（字段）组合成一个主键，用来唯一标识一条记录。在数据库中，每个表通常会有一个主键，用来确保每条记录的唯一性。而复合主键就是通过组合多个列的值来保证唯一性。</span></span></code></pre></div><blockquote><p>理解</p></blockquote><div class="language-tex vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">tex</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">假设有一个学生成绩表，每个学生在每个科目上都有一条成绩记录。如果我们仅用学生的学号作为主键，会出现学生在多个科目上的成绩无法区分的问题。于是，我们可以用学生的学号和科目名称作为复合主键来唯一标识每一条成绩记录。</span></span></code></pre></div><blockquote><p>实践</p></blockquote><div class="language-sql vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sql</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">CREATE</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> TABLE</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> student_scores</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    student_id </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">INT</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> NOT NULL</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    subject</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> VARCHAR</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">100</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">NOT NULL</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    score </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">DECIMAL</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">5</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">),</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    PRIMARY KEY</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (student_id, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">subject</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)  </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">-- 复合主键：student_id + subject</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span></code></pre></div><h3 id="五-自动增长字段" tabindex="-1">（五）自动增长字段 <a class="header-anchor" href="#五-自动增长字段" aria-label="Permalink to &quot;（五）自动增长字段&quot;">​</a></h3><blockquote><p><strong>用于生成唯一且递增的值</strong></p></blockquote><div class="language-sql vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sql</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">CREATE</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> TABLE</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> users</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    id </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">INT</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> AUTO_INCREMENT </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">PRIMARY KEY</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    name</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> VARCHAR</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">100</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">),</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    email </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">VARCHAR</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">100</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span></code></pre></div><h3 id="六-索引" tabindex="-1">（六）索引 <a class="header-anchor" href="#六-索引" aria-label="Permalink to &quot;（六）索引&quot;">​</a></h3><div class="tip custom-block"><p class="custom-block-title">总结</p><p><strong>普通索引</strong> 用于加速查询。</p><p><strong>唯一索引</strong> 除了加速查询外，还保证数据列的唯一性。</p><p><strong>复合索引</strong> 可以用于多列查询，提高多条件查询效率。</p><p><strong>全文索引</strong> 适用于需要全文搜索的场景（如新闻、博客等文本内容）。</p></div><p>创建普通索引</p><div class="language-sql vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sql</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">CREATE</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> INDEX</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> index_name</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> ON</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> table_name (column_name);</span></span></code></pre></div><ul><li><code>index_name</code>：索引的名称。</li><li><code>table_name</code>：要创建索引的表名。</li><li><code>column_name</code>：要在其上创建索引的列名。</li></ul><h4 id="创建唯一索引" tabindex="-1">创建唯一索引 <a class="header-anchor" href="#创建唯一索引" aria-label="Permalink to &quot;创建唯一索引&quot;">​</a></h4><p>唯一索引保证索引列中的数据是唯一的，不能有重复值。</p><div class="language-sql vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sql</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">CREATE</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> UNIQUE INDEX</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> index_name</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> ON</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> table_name (column_name);</span></span></code></pre></div><h4 id="创建复合索引-多列索引" tabindex="-1">创建复合索引（多列索引） <a class="header-anchor" href="#创建复合索引-多列索引" aria-label="Permalink to &quot;创建复合索引（多列索引）&quot;">​</a></h4><div class="language-sql vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sql</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">CREATE</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> INDEX</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> index_name</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> ON</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> table_name (column1, column2);</span></span></code></pre></div><h4 id="创建全文索引" tabindex="-1">创建全文索引 <a class="header-anchor" href="#创建全文索引" aria-label="Permalink to &quot;创建全文索引&quot;">​</a></h4><p>用于全文搜索，适用于文本类型的列（如 <code>TEXT</code> 或 <code>VARCHAR</code>）。</p><div class="language-sql vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sql</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">CREATE</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> FULLTEXT</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> INDEX</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> index_name </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">ON</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> table_name (column_name);</span></span></code></pre></div><h4 id="创建空间索引" tabindex="-1">创建空间索引 <a class="header-anchor" href="#创建空间索引" aria-label="Permalink to &quot;创建空间索引&quot;">​</a></h4><p>用于地理空间数据的索引。</p><div class="language-sql vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sql</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">CREATE</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> SPATIAL</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> INDEX</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> index_name </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">ON</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> table_name (column_name);</span></span></code></pre></div><h3 id="七-唯一标识符uuid" tabindex="-1">（七）唯一标识符UUID <a class="header-anchor" href="#七-唯一标识符uuid" aria-label="Permalink to &quot;（七）唯一标识符UUID&quot;">​</a></h3><p><strong>全局唯一</strong>：UUID 的设计目标是使得在分布式系统中生成的标识符具有全局唯一性，几乎不可能重复。</p><p><strong>不依赖于中心化的服务器</strong>：UUID 可以在没有中心化协调的情况下生成，因此适用于分布式系统。</p><p><strong>常用版本</strong>：</p><ul><li><strong>UUID v1</strong>：基于时间戳和节点（如 MAC 地址）生成，确保唯一性。</li><li><strong>UUID v4</strong>：基于随机数生成（大部分位是随机的），通常用于大多数场景，因为它不依赖于系统时间或硬件。</li></ul>`,60)]))}const E=i(l,[["render",n]]);export{c as __pageData,E as default};
